From ed4dc0f153cbab8e3e6d62665cd7e88eaf7febee Mon Sep 17 00:00:00 2001
From: Julien Enselme <julien.enselme@ioda.net>
Date: Thu, 23 Mar 2017 10:18:48 +0100
Subject: [PATCH] Fix the parsing of flat coordinates in GML2 for 3D geometies

The code used to rely on the dimension. However, the dimension can only
be read from a GML3 document. This caused, for 3D geometries:
- An assertion error to be raised since the flatCoordinates list
contains more than 3 elements: "Assertion failed: flatCoordinates
should have a length of 3" The value of flatCoordinates for a 3D point
was something like `[2586394, 1232407, 0, 731, NaN, 0]`
- The value of the Z coordinates to be incorrect and always set to 0

This patch simplifies and correct the parsing of the coordinates:
- Don't parse groups of coords and the coordonates at the same time.
- Detect the dimension for the coordinates.
- If the Z coordinate exists, its value is used, otherwise, we use 0.
- Correct the presentation of test data to make it work with the new
parser.
- Add a test for a 3D point.
---
 src/ol/format/gml2.js           | 36 ++++++++++++++++++++----------------
 test/spec/ol/format/gml.test.js | 11 +++++++++++
 2 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/src/ol/format/gml2.js b/src/ol/format/gml2.js
index dce8807..9e345db 100644
--- a/src/ol/format/gml2.js
+++ b/src/ol/format/gml2.js
@@ -59,7 +59,6 @@ ol.format.GML2.prototype.readFlatCoordinates_ = function(node, objectStack) {
   var s = ol.xml.getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
   var context = /** @type {ol.XmlNodeStackItem} */ (objectStack[0]);
   var containerSrs = context['srsName'];
-  var containerDimension = node.parentNode.getAttribute('srsDimension');
   var axisOrientation = 'enu';
   if (containerSrs) {
     var proj = ol.proj.get(containerSrs);
@@ -67,24 +66,29 @@ ol.format.GML2.prototype.readFlatCoordinates_ = function(node, objectStack) {
       axisOrientation = proj.getAxisOrientation();
     }
   }
-  var coords = s.split(/[\s,]+/);
-  // The "dimension" attribute is from the GML 3.0.1 spec.
-  var dim = 2;
-  if (node.getAttribute('srsDimension')) {
-    dim = ol.format.XSD.readNonNegativeIntegerString(
-        node.getAttribute('srsDimension'));
-  } else if (node.getAttribute('dimension')) {
-    dim = ol.format.XSD.readNonNegativeIntegerString(
-        node.getAttribute('dimension'));
-  } else if (containerDimension) {
-    dim = ol.format.XSD.readNonNegativeIntegerString(containerDimension);
+  // Since we must accept thing like '42.42, 89.6', splitting on spaces may
+  // include wrong group. In this example, we will get ['42.42,', '89.6'].
+  // We correct the list of group before reading the coordinates: if a string
+  // ends by a comma, it must be concatenated with the next one.
+  var rawCoordsGroups = s.trim().split(/\s+/);
+  var coordsGroups = [];
+  for (var j = 0, jj = rawCoordsGroups.length; j < jj; j++) {
+    var rawCoords = rawCoordsGroups[j];
+    if (rawCoords[rawCoords.length - 1] === ',') {
+      coordsGroups.push(rawCoords + rawCoordsGroups[j + 1]);
+      j++;
+    } else {
+      coordsGroups.push(rawCoords);
+    }
   }
+
   var x, y, z;
   var flatCoordinates = [];
-  for (var i = 0, ii = coords.length; i < ii; i += dim) {
-    x = parseFloat(coords[i]);
-    y = parseFloat(coords[i + 1]);
-    z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;
+  for (var i = 0, ii = coordsGroups.length; i < ii; i++) {
+    var coords = coordsGroups[i].split(/,+/);
+    x = parseFloat(coords[0]);
+    y = parseFloat(coords[1]);
+    z = (coords.length === 3) ? parseFloat(coords[2]) : 0;
     if (axisOrientation.substr(0, 2) === 'en') {
       flatCoordinates.push(x, y, z);
     } else {
diff --git a/test/spec/ol/format/gml.test.js b/test/spec/ol/format/gml.test.js
index 4010d56..7fb3631 100644
--- a/test/spec/ol/format/gml.test.js
+++ b/test/spec/ol/format/gml.test.js
@@ -62,6 +62,17 @@ describe('ol.format.GML2', function() {
         expect(g.getCoordinates()).to.eql([-180, -90, 0]);
       });
 
+      it('can read a 3D point geometry', function() {
+        var text = '<gml:Point xmlns:gml="http://www.opengis.net/gml" ' +
+            '    srsName="urn:x-ogc:def:crs:EPSG:4326">' +
+            '  <gml:coordinates>-90,-180,42</gml:coordinates>' +
+            '</gml:Point>';
+
+        var g = readGeometry(format, text);
+        expect(g).to.be.an(ol.geom.Point);
+        expect(g.getCoordinates()).to.eql([-180, -90, 42]);
+      });
+
       it('can read a box element', function() {
         var text = '<gml:Box xmlns:gml="http://www.opengis.net/gml" ' +
             'srsName="EPSG:4326">' +
-- 
2.9.3

